parameters:
  - name: backendDir
    default: "terraform-backend"
  - name: app_name
    default: "nodejs-docker-backend"

variables:
  - group: "nodejs-mysql-docker-group"

pool:
  vmImage: ubuntu-latest

stages:
  - stage: dev
    jobs:
    - template: ../templates/terraform.yml #https://julie.io/writing/terraform-on-azure-pipelines-best-practices/
      parameters:
        out_file: "main"
        input_vars:  '-var "app_name=${{ parameters.app_name }}" -var "subscription_id=$(SUBSCRIPTION-ID)" -var "client_id=$(CLIENT-ID)" -var "client_secret=$(CLIENT-SECRET)" -var "tenant_id=$(TENANT-ID)"'
        include_root_rolder: false
        work_dir: ${{ parameters.backendDir }}
        archive_type: 'tar'
        output_file: 'tf-backend'
        artifact_name: 'tf-states'

    - template: ../templates/storage-account.yml
      parameters:
        depends_on: 'Terraform'
        input_file: 'input_file'
        output_file: 'tf-backend.tar'
        file_name: 'tf-backend.json'
        file_destination: 'file_destination'
        artifact_name: 'tf-states'
        
    # - template: ../templates/archive-file.yml
    #   parameters:
    #     depends_on: 'Terraform'
    #     include_root_rolder: false
    #     work_dir: ${{ parameters.backendDir }}
    #     archive_type: 'tar'
    #     output_file: 'tf-backend'